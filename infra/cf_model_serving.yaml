AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for text2video application with S3 buckets, ALB, API Gateway, Lambda functions, and DocumentDB'

Parameters:
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for VPC
  
  DocumentDBUsername:
    Type: String
    Default: 'admin'
    Description: Username for DocumentDB cluster
  
  DocumentDBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for DocumentDB cluster (minimum 8 characters)

Resources:
  # VPC and Networking (required for DocumentDB and ALB)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Text2Video-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Text2Video-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Text2Video-Public-Subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.3.0/24'
      Tags:
        - Key: Name
          Value: Text2Video-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.4.0/24'
      Tags:
        - Key: Name
          Value: Text2Video-Private-Subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Text2Video-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Text2Video-Public-RT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DocumentDB cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Text2Video-ALB
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Text2Video-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # DocumentDB
  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupName: text2video-docdb-subnet-group
      DBSubnetGroupDescription: Subnet group for DocumentDB cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: videos
      MasterUsername: !Ref DocumentDBUsername
      MasterUserPassword: !Ref DocumentDBPassword
      Engine: docdb
      EngineVersion: '4.0.0'
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DocumentDBSecurityGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'

  DocumentDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBInstanceIdentifier: videos-instance-1
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${ModelsBucket}/*'
                  - !Sub '${Text2VideoBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt ModelsBucket.Arn
                  - !GetAtt Text2VideoBucket.Arn

  # Lambda Functions
  PromptLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: text2video-prompt
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Prompt endpoint',
                      'path': '/v1/prompt'
                  })
              }

  RenderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: text2video-render
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Render endpoint',
                      'path': '/v1/render'
                  })
              }

  GenerateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: text2video-generate
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DOCDB_ENDPOINT: !GetAtt DocumentDBCluster.Endpoint
          DOCDB_PORT: !GetAtt DocumentDBCluster.Port
          DOCDB_USERNAME: !Ref DocumentDBUsername
          DOCDB_PASSWORD: !Ref DocumentDBPassword
      Code:
        ZipFile: |
          import json
          import os
          import ssl
          from pymongo import MongoClient
          
          def lambda_handler(event, context):
              try:
                  # DocumentDB connection parameters
                  docdb_endpoint = os.environ['DOCDB_ENDPOINT']
                  docdb_port = int(os.environ['DOCDB_PORT'])
                  username = os.environ['DOCDB_USERNAME']
                  password = os.environ['DOCDB_PASSWORD']
                  
                  # Connection string for DocumentDB
                  connection_string = f"mongodb://{username}:{password}@{docdb_endpoint}:{docdb_port}/videos?ssl=true&ssl_ca_certs=rds-ca-2019-root.pem&retryWrites=false"
                  
                  # Connect to DocumentDB
                  client = MongoClient(connection_string, 
                                     ssl_cert_reqs=ssl.CERT_NONE,
                                     ssl_ca_certs=None)
                  
                  # Select database and collection
                  db = client['videos']
                  collection = db['generations']
                  
                  # Parse the request body
                  body = json.loads(event.get('body', '{}'))
                  
                  # Insert a document (example)
                  document = {
                      'prompt': body.get('prompt', 'Default prompt'),
                      'status': 'processing',
                      'timestamp': context.aws_request_id
                  }
                  
                  result = collection.insert_one(document)
                  
                  # Close the connection
                  client.close()
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Generate endpoint - DocumentDB connected',
                          'document_id': str(result.inserted_id),
                          'path': '/v1/generate'
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Error connecting to DocumentDB'
                      })
                  }

  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Text2Video-API
      Description: API Gateway for Text2Video application
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: v1

  # Prompt Resource and Method
  ApiGatewayPromptResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayV1Resource
      PathPart: prompt

  ApiGatewayPromptMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayPromptResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PromptLambda.Arn}/invocations'

  # Render Resource and Method
  ApiGatewayRenderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayV1Resource
      PathPart: render

  ApiGatewayRenderMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayRenderResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RenderLambda.Arn}/invocations'

  # Generate Resource and Method
  ApiGatewayGenerateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayV1Resource
      PathPart: generate

  ApiGatewayGenerateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayGenerateResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateLambda.Arn}/invocations'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayPromptMethod
      - ApiGatewayRenderMethod
      - ApiGatewayGenerateMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  # Lambda Permissions
  PromptLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PromptLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/v1/prompt'

  RenderLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RenderLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/v1/render'

  GenerateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenerateLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/v1/generate'

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'

  DocumentDBEndpoint:
    Description: DocumentDB cluster endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint

  DocumentDBPort:
    Description: DocumentDB cluster port
    Value: !GetAtt DocumentDBCluster.Port